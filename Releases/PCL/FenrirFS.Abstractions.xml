<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FenrirFS.Abstractions</name>
    </assembly>
    <members>
        <member name="T:FenrirFS.AFileSystem">
            <summary>
            Represents an abstract file system in FenrirFS.
            </summary>
        </member>
        <member name="M:FenrirFS.AFileSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FenrirFS.AFileSystem"/> class.
            </summary>
        </member>
        <member name="P:FenrirFS.AFileSystem.DefaultEncoding">
            <summary>
            Gets or sets the default encoding.
            </summary>
            <value>The default encoding.</value>
        </member>
        <member name="P:FenrirFS.AFileSystem.StorageLocal">
            <summary>
            Gets or sets the local storage folder.
            </summary>
            <value>The storage local.</value>
        </member>
        <member name="P:FenrirFS.AFileSystem.StorageRoaming">
            <summary>
            Gets or sets the roaming storage folder.
            </summary>
            <value>The storage roaming.</value>
        </member>
        <member name="P:FenrirFS.AFileSystem.StorageUser">
            <summary>
            Gets or sets the user storage folder.
            </summary>
            <value>The storage user.</value>
        </member>
        <member name="P:FenrirFS.AFileSystem.StorageWorking">
            <summary>
            Gets or sets the working storage folder.
            </summary>
            <value>The storage working.</value>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFile(System.String,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Creates a file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFile representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFile(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Creates a file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFile representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFile(System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Creates a file.
            </summary>
            <param name="path">The path.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFile representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFileAsync(System.String,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a file asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to create a new file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFileAsync(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a file asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to create a new file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFileAsync(System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a file asynchronously.
            </summary>
            <param name="path">The path.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to create a new file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFolder(System.String,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Creates a folder.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFolder representing the folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFolder(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Creates a folder.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFolder representing the folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFolder(System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Creates a folder.
            </summary>
            <param name="path">The path.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFolder representing the folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFolderAsync(System.String,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a folder asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to create a new folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFolderAsync(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a folder asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to create a new folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.CreateFolderAsync(System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a folder asynchronously.
            </summary>
            <param name="path">The path.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to create a new folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.Exists(System.String)">
            <summary>
            Checks whether the item at the specified path exists.
            </summary>
            <param name="path">The path.</param>
            <returns>The results of the existence check.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.ExistsAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously checks whether the item at the specified path exists.
            </summary>
            <param name="path">The path.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            An ExistenceCheckResult task to check the existance of the path. The
            ExistanceCheckResult represents the results of the check.
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.FileExists(System.String)">
            <summary>
            Checks if a file exists at the path.
            </summary>
            <param name="path">The path.</param>
            <returns>Whether the file exists (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.FileExistsAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously checks if a file exists at the path.
            </summary>
            <param name="path">The path.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to check if the file exists. The boolean represents whether the file
            exists (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.FolderExists(System.String)">
            <summary>
            Checks if a folder exists at the path.
            </summary>
            <param name="path">The path.</param>
            <returns>Whether the folder exists (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.FolderExistsAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously checks if a folder exists at the path.
            </summary>
            <param name="path">The path.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to check if the folder exists. The boolean represents whether the folder
            exists (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFileUniqueName(FenrirFS.AFolder,System.String,System.Int32)">
            <summary>
            Generates a unique name for a file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <returns>A new unique name for the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFileUniqueName(System.String,System.String,System.Int32)">
            <summary>
            Generates a unique name for a file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <returns>A new unique name for the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFileUniqueName(System.String,System.Int32)">
            <summary>
            Generates a unique name for a file.
            </summary>
            <param name="path">The path.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <returns>A new unique name for the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFileUniqueNameAsync(FenrirFS.AFolder,System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generates a unique name for a file asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string task to generate a unique file name. The string represents a new unique name
            for the file.
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFileUniqueNameAsync(System.String,System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generates a unique name for a file asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string task to generate a unique file name. The string represents a new unique name
            for the file.
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFileUniqueNameAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generates a unique name for a file asynchronously.
            </summary>
            <param name="path">The path.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string task to generate a unique file name. The string represents a new unique name
            for the file.
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFolderUniqueName(FenrirFS.AFolder,System.String,System.Int32)">
            <summary>
            Generates a unique name for a folder.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <returns>A new unique name for the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFolderUniqueName(System.String,System.String,System.Int32)">
            <summary>
            Generates a unique name for a folder.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <returns>A new unique name for the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFolderUniqueName(System.String,System.Int32)">
            <summary>
            Generates a unique name for a folder.
            </summary>
            <param name="path">The path.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <returns>A new unique name for the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFolderUniqueNameAsync(FenrirFS.AFolder,System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generates a unique name for a folder asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string task to generate a unique folder name. The string represents a new unique name
            for the folder.
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFolderUniqueNameAsync(System.String,System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generates a unique name for a folder asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string task to generate a unique folder name. The string represents a new unique name
            for the folder.
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.GenerateFolderUniqueNameAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Generates a unique name for a folder asynchronously.
            </summary>
            <param name="path">The path.</param>
            <param name="iterations">The maximum iterations. Defaults to 99.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string task to generate a unique folder name. The string represents a new unique name
            for the folder.
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFile(System.String,FenrirFS.OpenMode)">
            <summary>
            Gets a file.
            </summary>
            <param name="path">The path.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <returns>The file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFile(System.String,System.String,FenrirFS.OpenMode)">
            <summary>
            Gets a file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="file">The file.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <returns>The file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFile(FenrirFS.AFolder,System.String,FenrirFS.OpenMode)">
            <summary>
            Gets a file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="file">The file.</param>
            <param name="openMode">The open mode Defaults to Normal..</param>
            <returns>The file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFileAsync(System.String,FenrirFS.OpenMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a file asynchronously.
            </summary>
            <param name="path">The path.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to open a file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFileAsync(System.String,System.String,FenrirFS.OpenMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a file asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="file">The file.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to open a file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFileAsync(FenrirFS.AFolder,System.String,FenrirFS.OpenMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a file asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="file">The file.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to open a file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFolder(System.String,FenrirFS.OpenMode)">
            <summary>
            Gets a folder.
            </summary>
            <param name="path">The path.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <returns>The folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFolder(System.String,System.String,FenrirFS.OpenMode)">
            <summary>
            Gets a folder.
            </summary>
            <param name="directory">The directory.</param>
            <param name="folder">The folder.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <returns>The folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFolder(FenrirFS.AFolder,System.String,FenrirFS.OpenMode)">
            <summary>
            Gets a folder.
            </summary>
            <param name="directory">The directory.</param>
            <param name="folder">The folder.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <returns>The folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFolderAsync(System.String,FenrirFS.OpenMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a folder asynchronously.
            </summary>
            <param name="path">The path.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to open a folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFolderAsync(System.String,System.String,FenrirFS.OpenMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a folder asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="folder">The folder.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to open a folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.OpenFolderAsync(FenrirFS.AFolder,System.String,FenrirFS.OpenMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a folder asynchronously.
            </summary>
            <param name="directory">The directory.</param>
            <param name="folder">The folder.</param>
            <param name="openMode">The open mode. Defaults to Normal.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to open a folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.SetStorageUser(System.String)">
            <summary>
            Sets the user's storage folder.
            </summary>
            <param name="path">The path.</param>
            <returns>Whether the folder was set (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFileSystem.SetStorageUserAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously sets the user's storage folder.
            </summary>
            <param name="path">The path.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to set the user's storage folder. The boolean represents whether the
            folder was set (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFileSystem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:FenrirFS.AFolder">
            <summary>
            Represents an abstract folder in FenrirFS.
            </summary>
        </member>
        <member name="F:FenrirFS.AFolder.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:FenrirFS.AFolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FenrirFS.AFolder"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:FenrirFS.AFolder.CreationTime">
            <summary>
            Gets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.CreationTimeUtc">
            <summary>
            Gets the UTC creation time.
            </summary>
            <value>
            The creation time UTC.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.FullPath">
            <summary>
            Gets the full path.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="P:FenrirFS.AFolder.LastAccessedTime">
            <summary>
            Gets the last accessed time.
            </summary>
            <value>
            The last accessed time.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.LastAccessedTimeUtc">
            <summary>
            Gets the UTC last accessed time.
            </summary>
            <value>
            The last accessed time UTC.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.LastModifiedTime">
            <summary>
            Gets the last modified time.
            </summary>
            <value>
            The last modified time.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.LastModifiedTimeUtc">
            <summary>
            Gets the UTC last modified time.
            </summary>
            <value>
            The last modified time UTC.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:FenrirFS.AFolder.ParentFolder">
            <summary>
            Gets the parent folder for the folder.
            </summary>
            <value>
            The parent folder.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:FenrirFS.AFolder.RootFolder">
            <summary>
            Gets the root folder for the folder.
            </summary>
            <value>
            The root folder.
            </value>
        </member>
        <member name="P:FenrirFS.AFolder.Size">
            <summary>
            Gets the size of the folder, in bytes.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:FenrirFS.AFolder.Copy(System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption)">
            <summary>
            Copies the folder to the destination.
            </summary>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <returns>An AFolder representing the new folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.Copy(System.String,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption)">
            <summary>
            Copies the folder to the destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <returns>An AFolder representing the new folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.Copy(FenrirFS.AFolder,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption)">
            <summary>
            Copies the folder to the destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <returns>An AFolder representing the new folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CopyAsync(System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously copies the folder to the destination.
            </summary>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to copy the folder. The AFolder represents the new folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyAsync(System.String,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously copies the folder to the destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to copy the folder. The AFolder represents the new folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyAsync(FenrirFS.AFolder,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously copies the folder to the destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to copy the folder. The AFolder represents the new folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFile(System.String,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Copies a file.
            </summary>
            <param name="file">The file.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>An AFile representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFile(System.String,System.String,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Copies a file.
            </summary>
            <param name="file">The file.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>An AFile representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFile(System.String,FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Copies a file.
            </summary>
            <param name="file">The file.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>An AFile representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFileAsync(System.String,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies a file asynchronously.
            </summary>
            <param name="file">The file.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to copy a file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFileAsync(System.String,System.String,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies a file asynchronously.
            </summary>
            <param name="file">The file.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to copy a file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFileAsync(System.String,FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies a file asynchronously.
            </summary>
            <param name="file">The file.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to copy a file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFolder(System.String,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption)">
            <summary>
            Copies a folder.
            </summary>
            <param name="folder">The folder.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <returns>An AFolder representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFolder(System.String,System.String,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption)">
            <summary>
            Copies a folder.
            </summary>
            <param name="folder">The folder.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <returns>An AFolder representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFolder(System.String,FenrirFS.AFolder,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption)">
            <summary>
            Copies a folder.
            </summary>
            <param name="folder">The folder.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <returns>An AFolder representing the file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFolderAsync(System.String,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies a folder asynchronously.
            </summary>
            <param name="folder">The folder.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to copy a folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFolderAsync(System.String,System.String,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies a folder asynchronously.
            </summary>
            <param name="folder">The folder.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to copy a folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CopyFolderAsync(System.String,FenrirFS.AFolder,System.String,FenrirFS.FolderCollisionOption,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies a folder asynchronously.
            </summary>
            <param name="folder">The folder.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="folderCollisionOption">The folder collision option.</param>
            <param name="fileCollisionOption">The file collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to copy a folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CreateFile(System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Creates a file in this directory.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>The new file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CreateFileAsync(System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a file in this directory asynchronously.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to create a file. The AFile represents the new file.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.CreateFolder(System.String,FenrirFS.FolderCollisionOption)">
            <summary>
            Creates a folder in this directory.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>The new folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.CreateFolderAsync(System.String,FenrirFS.FolderCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates a folder in this directory asynchronously.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to create a folder. The AFolder represents the new folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.Delete">
            <summary>
            Deletes this folder.
            </summary>
            <returns>Whether this folder was deleted or not.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.DeleteAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes this folder asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to delete this folder. The boolean represents whether this folder was
            deleted or not.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.DeleteFile(System.String)">
            <summary>
            Deletes a file in this directory.
            </summary>
            <param name="name">The name.</param>
            <returns>Whether the file was deleted or not.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.DeleteFileAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes a file in this directory asynchronously.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to delete a file. The boolean represents whether the file was deleted or not.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.DeleteFolder(System.String)">
            <summary>
            Deletes a folder in this directory.
            </summary>
            <param name="name">The name.</param>
            <returns>Whether the folder was deleted or not.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.DeleteFolderAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes a folder in this directory asynchronously.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to delete a folder. The boolean represents whether the folders was
            deleted or not.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:FenrirFS.AFolder.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.Equals(FenrirFS.AFolder)">
            <summary>
            Checks whether the specified folder is equal to this folder.
            </summary>
            <param name="folder">The folder.</param>
            <returns>Whether the folders are equal (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFolder.Exists(System.String)">
            <summary>
            Checks whether the item at the specified path exists.
            </summary>
            <param name="name">The name.</param>
            <returns>The results of the existence check.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.FileExists(System.String)">
            <summary>
            Checks if a file exists in this directory.
            </summary>
            <param name="name">The name.</param>
            <returns>Whether the file exists (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.FileExistsAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously checks if a file exists in this directory.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to check if the file exists. The boolean represents whether the file
            exists (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.FolderExists(System.String)">
            <summary>
            Checks if a folder exists in this directory.
            </summary>
            <param name="name">The name.</param>
            <returns>Whether the folder exists (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.FolderExistsAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously checks if a folder exists in this directory.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to check if the folder exists. The boolean represents whether the folder
            exists (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.GetFileNames">
            <summary>
            Gets the names of all files in this folder.
            </summary>
            <returns>A list of all file names in this folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.GetFileNamesAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets the names of all files in this folder.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string list task to get all the file names. The string list represents a list of all
            files in this folder.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.GetFiles">
            <summary>
            Gets the files in this folder.
            </summary>
            <returns>A list of all files in this folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.GetFilesAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets all the files in this folder.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A AFile list task to get all the files. The AFile list represents a list of all files in
            this folder.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.GetFolderNames">
            <summary>
            Gets the names of all folders in this folder.
            </summary>
            <returns>A list of all folders names in this folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.GetFolderNamesAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets the names of all folders in this folder.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A string list task to get all the folder names. The string list represents a list of all
            folders in this folder.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.GetFolders">
            <summary>
            Gets the folders in this folder.
            </summary>
            <returns>A AFolder list representing all folders in this folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.GetFoldersAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets the folders in this folder.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A AFolder list task to get all the folders. The AFolder list represents a list of all
            folders in this folder.
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.Move(System.String,FenrirFS.FolderCollisionOption)">
            <summary>
            Moves this folder to the specified destination.
            </summary>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>Whether the folder was moved (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.Move(System.String,System.String,FenrirFS.FolderCollisionOption)">
            <summary>
            Moves this folder to the specified destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>Whether the folder was moved (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.Move(FenrirFS.AFolder,System.String,FenrirFS.FolderCollisionOption)">
            <summary>
            Moves this folder to the specified destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>Whether the folder was moved (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.MoveAsync(System.String,FenrirFS.FolderCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously moves this folder to the specified destination.
            </summary>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to move the folder. The boolean represents whether the folder was moved
            (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.MoveAsync(System.String,System.String,FenrirFS.FolderCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously moves this folder to the specified destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to move the folder. The boolean represents whether the folder was moved
            (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.MoveAsync(FenrirFS.AFolder,System.String,FenrirFS.FolderCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously moves this folder to the specified destination.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to move the folder. The boolean represents whether the folder was moved
            (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.OpenFile(System.String)">
            <summary>
            Gets the file.
            </summary>
            <param name="name">The name.</param>
            <returns>The file.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.OpenFileAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the file asynchronous.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to open the file. The AFile represents the file.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.OpenFolder(System.String)">
            <summary>
            Gets the folder.
            </summary>
            <param name="name">The name.</param>
            <returns>The folder.</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.OpenFolderAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets the folder.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFolder task to get the folder. The AFolder represents the folder.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.RemameAsync(System.String,FenrirFS.FolderCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Renames the folder asynchronously.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>
            A boolean task to rename the folder. The boolean represents whether the folder was
            renamed (true) or not (false).
            </returns>
        </member>
        <member name="M:FenrirFS.AFolder.Rename(System.String,FenrirFS.FolderCollisionOption)">
            <summary>
            Renames the folder.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option.</param>
            <returns>Whether the folder was renamed (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">
            Exception representing that this function is not implemented.
            </exception>
        </member>
        <member name="M:FenrirFS.AFolder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:FenrirFS.AFolder.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="M:FenrirFS.AFolder.SetupAFolder(System.String)">
            <summary>
            Sets up a folder.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:FenrirFS.AFile">
            <summary>
            Represents an abstract file in FenrirFS.
            </summary>
        </member>
        <member name="F:FenrirFS.AFile.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="F:FenrirFS.AFile.encoding">
            <summary>
            The encoding of the file
            </summary>
        </member>
        <member name="M:FenrirFS.AFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FenrirFS.AFile"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:FenrirFS.AFile.CreationTime">
            <summary>
            Gets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.CreationTimeUtc">
            <summary>
            Gets the UTC creation time.
            </summary>
            <value>
            The creation time UTC.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.Encoding">
            <summary>
            Gets or sets the encoding of the file.
            </summary>
            <value>
            The encoding.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.EOS">
            <summary>
            Gets a value indicating whether the open stream is at the end of the stream.
            </summary>
            <value>
              <c>true</c> if EOS; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.Extension">
            <summary>
            Gets or sets the file extension.
            </summary>
            <value>
            The extension.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.FileAccessMode">
            <summary>
            Gets or sets the file access.
            </summary>
            <value>
            The file access.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.FileAttributes">
            <summary>
            Gets or sets the file attributes.
            </summary>
            <value>
            The file attributes.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.FileMode">
            <summary>
            Gets or sets the file mode.
            </summary>
            <value>
            The file mode.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.FullPath">
            <summary>
            Gets the full path of the file.
            </summary>
            <value>
            The full path.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.IsOpen">
            <summary>
            Gets a value indicating whether the file is open.
            </summary>
            <value>
              <c>true</c> if this file is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.LastAccessedTime">
            <summary>
            Gets the last accessed time.
            </summary>
            <value>
            The last accessed time.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.LastAccessedTimeUtc">
            <summary>
            Gets the UTC last accessed time.
            </summary>
            <value>
            The last accessed time UTC.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.LastModifiedTime">
            <summary>
            Gets the last modified time.
            </summary>
            <value>
            The last modified time.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.LastModifiedTimeUtc">
            <summary>
            Gets the UTC last modified time.
            </summary>
            <value>
            The last modified time UTC.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.Name">
            <summary>
            Gets or sets the file name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.ParentFolder">
            <summary>
            Gets the parent folder for the file.
            </summary>
            <value>
            The parent folder.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.Path">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.RootFolder">
            <summary>
            Gets the root folder for the file.
            </summary>
            <value>
            The root folder.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.Size">
            <summary>
            Gets the size of the file, in bytes.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:FenrirFS.AFile.Stream">
            <summary>
            Gets or sets the stream.
            </summary>
            <value>
            The stream.
            </value>
        </member>
        <member name="M:FenrirFS.AFile.ChangeExtension(System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Changes the file's extension.
            </summary>
            <param name="extension">The new extension.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>Whether the extension was changed (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.ChangeExtensionAsync(System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Changes the file's extension asynchronously.
            </summary>
            <param name="extension">The new extension.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to change the extension. Boolean represents whether the extension was changed (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.Clear">
            <summary>
            Clears the file of all text. Will return false if the file is open.
            </summary>
            <returns>Whether the file was cleared (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.ClearAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Clears the file of all text asynchronously. Will return false if the file is open.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to change the extension. Boolean represents whether the file was cleared (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.Close">
            <summary>
            Closes the file if the file is opened.
            </summary>
            <returns>Whether the file was closed (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.CloseAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Closes the file if the file is opened asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to change the extension. Boolean represents whether the file was closed (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.Copy(System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Copies the file.
            </summary>
            <param name="destination">The full path of the destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFile representing the copied file.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.Copy(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Copies the file.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFile representing the copied file.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.Copy(System.String,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Copies the file.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>An AFile representing the copied file.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.CopyAsync(System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies the file asynchronously.
            </summary>
            <param name="destination">The destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to copy the file. The AFile represents the copied file.</returns>
        </member>
        <member name="M:FenrirFS.AFile.CopyAsync(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies the file asynchronously.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to copy the file. The AFile represents the copied file.</returns>
        </member>
        <member name="M:FenrirFS.AFile.CopyAsync(System.String,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies the file asynchronously.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>An AFile task to copy the file. The AFile represents the copied file.</returns>
        </member>
        <member name="M:FenrirFS.AFile.Delete">
            <summary>
            Deletes the file.
            </summary>
            <returns>Whether the file was deleted (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.DeleteAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes the file asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to change the extension. Boolean represents whether the file was deleted (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:FenrirFS.AFile.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FenrirFS.AFile.Equals(FenrirFS.AFile)">
            <summary>
            Determines whether the specified file is equal to this file.
            </summary>
            <param name="file">The file to check.</param>
            <returns>Whether the files are equal (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FenrirFS.AFile.Move(System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Moves the file.
            </summary>
            <param name="destination">The destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>Whether the file was moved or not.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.Move(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Moves the file.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>Whether the file was moved or not.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.Move(System.String,System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Moves the file.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>Whether the file was moved or not.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.MoveAsync(System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Moves the file asynchronously.
            </summary>
            <param name="destination">The destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to move the file. The boolean represents whether the file was moved or not.</returns>
        </member>
        <member name="M:FenrirFS.AFile.MoveAsync(FenrirFS.AFolder,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Moves the file asynchronously.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to move the file. The boolean represents whether the file was moved or not.</returns>
        </member>
        <member name="M:FenrirFS.AFile.MoveAsync(System.String,System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Moves the file asynchronously.
            </summary>
            <param name="destinationPath">The destination path.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="collisionOption">The collision option.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to move the file. The boolean represents whether the file was moved or not.</returns>
        </member>
        <member name="M:FenrirFS.AFile.Open(FenrirFS.FileAccess,FenrirFS.FileMode)">
            <summary>
            Opens the file to the Stream.
            </summary>
            <param name="fileAccess">The file access.</param>
            <param name="fileMode">The file mode.</param>
            <returns>A reference to the Stream.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.OpenAsync(FenrirFS.FileAccess,FenrirFS.FileMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens the file to the Stream asynchronously.
            </summary>
            <param name="fileAccess">The file access.</param>
            <param name="fileMode">The file mode.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A Stream task to open the file. The Stream represents the stream.</returns>
        </member>
        <member name="M:FenrirFS.AFile.ReadAll">
            <summary>
            Reads all the contents of the file.
            </summary>
            <returns>A string representing the contents of the file.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.ReadAllAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Reads all the contents of the file asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A task to reaad the contents of the file. The string represents the contents of the file.</returns>
        </member>
        <member name="M:FenrirFS.AFile.ReadAllAsXElement">
            <summary>
            Reads all as the contents of the file as an XDocument.
            </summary>
            <returns>An XDocument representing the contents of the file.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.ReadAllAsXElementAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously reads all as the contents of the file as an XDocument.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An XDocument task to read the contents of the file. The XDocument represents the contents of the file..</returns>
        </member>
        <member name="M:FenrirFS.AFile.ReadAllLines">
            <summary>
            Reads all lines in the file.
            </summary>
            <returns>An array of strings, each item representing a line in the file.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.ReadAllLinesAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Reads all lines in the file asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A string arary task to read all the lines in the file. The array of strings represents each line in the file.</returns>
        </member>
        <member name="M:FenrirFS.AFile.ReadLine">
            <summary>
            Reads a line.
            </summary>
            <returns>A string representing a line in the file.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.ReadLine(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Reads a line asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A IEnumerable string task to read a line. The IEnumerable string represents a line.</returns>
        </member>
        <member name="M:FenrirFS.AFile.Rename(System.String,FenrirFS.FileCollisionOption)">
            <summary>
            Renames the file.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <returns>Whether the file was renamed (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.RenameAsync(System.String,FenrirFS.FileCollisionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Renames the file asynchronously.
            </summary>
            <param name="name">The name.</param>
            <param name="collisionOption">The collision option. Defaults to FailIfExists.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to rename the file. The boolean represents whether the file was renamed (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.StreamRead(System.Int32)">
            <summary>
            Reads from the stream.
            </summary>
            <param name="chars">The number of chars to read.</param>
            <returns>A string representing the read characters.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.StreamReadAll">
            <summary>
            Reads all contents from the stream.
            </summary>
            <returns>A string representing all the contents in the stream.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.StreamReadAllAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Reads all contents from the stream asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A string task to read all the contents from the stream. The string represents all the contents in the stream.</returns>
        </member>
        <member name="M:FenrirFS.AFile.StreamReadAsync(System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Reads from the stream asynchronously.
            </summary>
            <param name="chars">The chars.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A string task to read contents from the stream. The string represents the read characters.</returns>
        </member>
        <member name="M:FenrirFS.AFile.StreamReadLine">
            <summary>
            Reads a line from the stream.
            </summary>
            <returns>A string representing a line.</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.StreamReadLineAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Reads a line from the stream asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A string task to read contents from the stream. The string represents a line.</returns>
        </member>
        <member name="M:FenrirFS.AFile.StreamSetPosition(System.Int32)">
            <summary>
            Sets the position of the stream.
            </summary>
            <param name="position">The position.</param>
            <returns>Whether the position was set (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.StreamSetPositionAsync(System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sets the position of the stream asynchronously.
            </summary>
            <param name="position">The position.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to set the position of the stream. The boolean represents whether the position was set (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.StreamWrite(System.String)">
            <summary>
            Writes contents to the stream.
            </summary>
            <param name="contents">The contents.</param>
            <returns>Whether the stream was written to (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.StreamWriteAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Writes contents to the stream asynchronously.
            </summary>
            <param name="contents">The contents.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to write to the stream. The boolean represents whether the stream was written to (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.StreamWriteLine(System.String)">
            <summary>
            Writes a line to the stream.
            </summary>
            <param name="line">The line.</param>
            <returns>Whether the line was written (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.StreamWriteLineAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Writes a line to the stream asynchronously.
            </summary>
            <param name="line">The line.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to write a line of contents to the stream. The boolean represents whether the line was written (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FenrirFS.AFile.WriteAll(System.String,FenrirFS.WriteMode)">
            <summary>
            Writes contents to the file.
            </summary>
            <param name="contents">The contents.</param>
            <param name="writeMode">The write mode. Defaults to Truncate.</param>
            <returns>Whether the contents were written (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.WriteAllAsync(System.String,FenrirFS.WriteMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Writes contents to the file asynchronously.
            </summary>
            <param name="contents">The contents.</param>
            <param name="writeMode">The write mode. Defaults to Truncate.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to write to the file. The boolean represents whether the contents were written (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.WriteLine(System.String,FenrirFS.WriteMode)">
            <summary>
            Writes a line to the file.
            </summary>
            <param name="line">The line.</param>
            <param name="writeMode">The write mode. Defaults to Append.</param>
            <returns>Whether the line was written (true) or not (false).</returns>
            <exception cref="T:System.NotImplementedException">Exception representing that this function is not implemented.</exception>
        </member>
        <member name="M:FenrirFS.AFile.WriteLineAsync(System.String,FenrirFS.WriteMode,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Writes a line to the file asynchronously.
            </summary>
            <param name="line">The line.</param>
            <param name="writeMode">The write mode. Defaults to Append.</param>
            <param name="cancellationToken">The cancellation token. Defaults to null.</param>
            <returns>A boolean task to write the line. The boolean represents whether the line was written (true) or not (false).</returns>
        </member>
        <member name="M:FenrirFS.AFile.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:FenrirFS.AFile.SetupFile(System.String)">
            <summary>
            Sets up the file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:FenrirFS.AwaitHelpers">
            <summary>
            Various helpers for asynchronous functions.
            </summary>
        </member>
        <member name="M:FenrirFS.AwaitHelpers.CheckCancellationToken(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks the cancellation token and returns a new token if the supplied value is null.
            </summary>
            <param name="cancellationToken">The cancellation token to check. Defaults to null.</param>
            <returns>A cancellation token</returns>
        </member>
        <member name="M:FenrirFS.AwaitHelpers.CreateTaskScheduler(System.Threading.CancellationToken)">
            <summary>
            When called in an async function, will return a valid await for a new task.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A new Awaiter.</returns>
        </member>
        <member name="T:FenrirFS.ExistenceCheckResult">
            <summary>
            The result of an existence check. Defines what type of object exists, if any, at a given path.
            </summary>
        </member>
        <member name="F:FenrirFS.ExistenceCheckResult.FileExists">
            <summary>
            A file exists at the given path.
            </summary>
        </member>
        <member name="F:FenrirFS.ExistenceCheckResult.FolderExists">
            <summary>
            A folder exists at the given path.
            </summary>
        </member>
        <member name="F:FenrirFS.ExistenceCheckResult.FileAndFolderExists">
            <summary>
            A file and a folder with the same name exist at the given path.
            </summary>
        </member>
        <member name="F:FenrirFS.ExistenceCheckResult.NotFound">
            <summary>
            No file or folder found at the given path.
            </summary>
        </member>
        <member name="T:FenrirFS.FileAccess">
            <summary>
            Modes that a stream can be opened as.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAccess.Read">
            <summary>
            Data can be read (retrieved) from the file.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAccess.ReadWrite">
            <summary>
            Data can be added to and retrieved from the file.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAccess.Write">
            <summary>
            Data can be written (added) to the file.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAccess.None">
            <summary>
            The file is not open for read or write.
            </summary>
        </member>
        <member name="T:FenrirFS.FileAttributes">
            <summary>
            Attributes for files and directories.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Archive">
            <summary>
            The file is a candidate for backup or removal.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Compressed">
            <summary>
            The file is compressed.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Device">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Directory">
            <summary>
            The file is a directory.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Encrypted">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and directories.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Hidden">
            <summary>
            The file is hidden, and thus is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.IntegrityStream">
            <summary>
            The file or directory includes data integrity support. When this value is applied to a file, all data streams in the file have integrity support. When this value is applied to a directory, all new files and subdirectories within that directory, by default, include integrity support.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Normal">
            <summary>
            The file is a standard file that has no special attributes. This attribute is valid only if it is used alone.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.NoScrubData">
            <summary>
            The file or directory is excluded from the data integrity scan. When this value is applied to a directory, by default, all new files and subdirectories within that directory are excluded from data integrity.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.NotContentIndexed">
            <summary>
            The file will not be indexed by the operating system's content indexing service.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Offline">
            <summary>
            The file is offline. The data of the file is not immediately available.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.ReadOnly">
            <summary>
            The file is read-only.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.ReparsePoint">
            <summary>
            The file contains a reparse point, which is a block of user-defined data associated with a file or a directory.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.SparseFile">
            <summary>
            The file is a sparse file. Sparse files are typically large files whose data consists of mostly zeros.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.System">
            <summary>
            The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system.
            </summary>
        </member>
        <member name="F:FenrirFS.FileAttributes.Temporary">
            <summary>
            The file is temporary. A temporary file contains data that is needed while an application is executing but is not needed after the application is finished. File systems try to keep all the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed.
            </summary>
        </member>
        <member name="T:FenrirFS.FileCollisionOption">
            <summary>
            Options for collisions between files.
            </summary>
        </member>
        <member name="F:FenrirFS.FileCollisionOption.GenerateUniqueName">
            <summary>
            Attempt to generate a unique name
            </summary>
        </member>
        <member name="F:FenrirFS.FileCollisionOption.ReplaceExisting">
            <summary>
            Replace any existing file
            </summary>
        </member>
        <member name="F:FenrirFS.FileCollisionOption.FailIfExists">
            <summary>
            Fail if a file already exists
            </summary>
        </member>
        <member name="T:FenrirFS.FileMode">
            <summary>
            File/folder creation modes.
            </summary>
        </member>
        <member name="F:FenrirFS.FileMode.Append">
            <summary>
            Opens the file and adds data to the end. If no file exists, creates a new file. Should be used with the FileAccess.Write option.
            </summary>
        </member>
        <member name="F:FenrirFS.FileMode.Create">
            <summary>
            Creates a new file, overwriting any existing file.
            </summary>
        </member>
        <member name="F:FenrirFS.FileMode.CreateNew">
            <summary>
            Creates a new file. If the file already exists, throws an exception.
            </summary>
        </member>
        <member name="F:FenrirFS.FileMode.Open">
            <summary>
            Opens an existing file. If no file exists, throws an exception.
            </summary>
        </member>
        <member name="F:FenrirFS.FileMode.OpenOrCreate">
            <summary>
            Opens an existing file. If no file exists, creates a new file.
            </summary>
        </member>
        <member name="F:FenrirFS.FileMode.Truncate">
            <summary>
            Opens and truncates an existing file. If no file exists, creates a new file.
            </summary>
        </member>
        <member name="F:FenrirFS.FileMode.None">
            <summary>
            The file is not open for read or write.
            </summary>
        </member>
        <member name="T:FenrirFS.FolderCollisionOption">
            <summary>
            Options for collisions between folders.
            </summary>
        </member>
        <member name="F:FenrirFS.FolderCollisionOption.GenerateUniqueName">
            <summary>
            Attempt to generate a unique name
            </summary>
        </member>
        <member name="F:FenrirFS.FolderCollisionOption.ReplaceExisting">
            <summary>
            Replace any existing folder
            </summary>
        </member>
        <member name="F:FenrirFS.FolderCollisionOption.FailIfExists">
            <summary>
            Fail if a folder already exists
            </summary>
        </member>
        <member name="F:FenrirFS.FolderCollisionOption.OpenIfExists">
            <summary>
            Open if a folder exists
            </summary>
        </member>
        <member name="T:FenrirFS.OpenMode">
            <summary>
            Modes that a file can be opened to as.
            </summary>
        </member>
        <member name="F:FenrirFS.OpenMode.Normal">
            <summary>
            Normal, open the file or create it if it doesn't exist.
            </summary>
        </member>
        <member name="F:FenrirFS.OpenMode.FailIfDoesNotExist">
            <summary>
            Open if it exists, otherwise fail.
            </summary>
        </member>
        <member name="T:FenrirFS.SearchOption">
            <summary>
            The option to use during searching.
            </summary>
        </member>
        <member name="F:FenrirFS.SearchOption.AllDirectories">
            <summary>
            Search the top directory and all sub-directories.
            </summary>
        </member>
        <member name="F:FenrirFS.SearchOption.TopDirectoryOnly">
            <summary>
            Search the top directory only.
            </summary>
        </member>
        <member name="F:FenrirFS.SearchOption.SubDirectoriesOnly">
            <summary>
            Search the sub-directories only
            </summary>
        </member>
        <member name="T:FenrirFS.WriteMode">
            <summary>
            Modes that a file can be written to as.
            </summary>
        </member>
        <member name="F:FenrirFS.WriteMode.Append">
            <summary>
            Append new text to any existing text.
            </summary>
        </member>
        <member name="F:FenrirFS.WriteMode.Truncate">
            <summary>
            Replace any existing text with new text.
            </summary>
        </member>
        <member name="T:FenrirFS.Exceptions">
            <summary>
            Various exception helper functions.
            </summary>
        </member>
        <member name="M:FenrirFS.Exceptions.CanNotGenerateUniqueNameException(System.Int32)">
            <summary>
            Generates a 'Can't Generate Unique Name' exception.
            </summary>
            <param name="iterations">The number of attempts.</param>
            <returns>Returns a 'Can't Generate Unique Name' exception.</returns>
        </member>
        <member name="M:FenrirFS.Exceptions.NotImplementedInCurrentFileSystemException">
            <summary>
            Generates a 'Not Implemented in Current File-system' exception.
            </summary>
            <returns>Returns a 'Not Implemented in Current File-system' exception.</returns>
        </member>
        <member name="M:FenrirFS.Exceptions.NotNullException``1(``0,System.String)">
            <summary>
            Checks if a parameter is a null value, and throws if it is.
            </summary>
            <typeparam name="T">The object to check.</typeparam>
            <param name="value">The value.</param>
            <param name="parameter">The parameter.</param>
            <returns>Returns the value, or throws a null argument exception.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is null.</exception>
        </member>
        <member name="M:FenrirFS.Exceptions.NotNullCheck``1(``0,System.String)">
            <summary>
            Checks if a parameter is a null value, and throws if it is.
            </summary>
            <typeparam name="T">The object to check.</typeparam>
            <param name="value">The value.</param>
            <param name="parameter">The parameter.</param>
            <returns>Returns the value, or throws a null argument exception.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is null.</exception>
        </member>
        <member name="M:FenrirFS.Exceptions.NotNullOrEmptyCheck(System.String,System.String)">
            <summary>
            Checks if a string value is null or empty, and throws if it is.
            </summary>
            <param name="value">The value.</param>
            <param name="parameter">The parameter.</param>
            <returns>Returns the true, or throws a null argument exception.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string value is null or empty.</exception>
        </member>
        <member name="M:FenrirFS.Exceptions.NotNullOrEmptyException(System.String,System.String)">
            <summary>
            Checks if a string value is null or empty, and throws if it is.
            </summary>
            <param name="value">The value.</param>
            <param name="parameter">The parameter.</param>
            <returns>Returns the value, or throws a null argument exception.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string value is null or empty.</exception>
        </member>
        <member name="T:FenrirFS.Awaiter">
            <summary>
            An awaiter for asynchronous functions.
            </summary>
        </member>
        <member name="F:FenrirFS.Awaiter.cancellationToken">
            <summary>
            The cancellation token
            </summary>
        </member>
        <member name="F:FenrirFS.Awaiter.scheduler">
            <summary>
            The task scheduler
            </summary>
        </member>
        <member name="M:FenrirFS.Awaiter.#ctor(System.Threading.Tasks.TaskScheduler,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:FenrirFS.Awaiter"/> struct.
            </summary>
            <param name="scheduler">The scheduler.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:FenrirFS.Awaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the scheduler is completed.
            </summary>
            <value>
            <c>true</c> if this instance is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FenrirFS.Awaiter.GetAwaiter">
            <summary>
            Gets the awaiter for the task.
            </summary>
            <returns>Returns the awaiter.</returns>
        </member>
        <member name="M:FenrirFS.Awaiter.GetResult">
            <summary>
            Gets the result for the task.
            </summary>
        </member>
        <member name="M:FenrirFS.Awaiter.OnCompleted(System.Action)">
            <summary>
            Called when the task is completed.
            </summary>
            <param name="continuation">The continuation action.</param>
            <exception cref="T:System.InvalidOperationException">IsCompleted is true, so this is unexpected.</exception>
        </member>
    </members>
</doc>
